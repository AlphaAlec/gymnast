// Table of Contents
// 1. Grid Variables
// 2. Grid Mixins
// 3. CSS Ready Mixins and Classes
// 4. Internet Explorer 8 Fallbacks
 
 // ----- Grid Variables
// ---------------------
$max-width: 1200px;
$width: 100%;
$columns: 12;
$block-grids: 6;
$max-inline-blocks: 4;
$gutter: 15px;
 
* {
	-webkit-box-sizing: border-box;
	-moz-box-sizing: border-box;
	box-sizing: border-box;
}
 
 // ---------------- Overview
// --------------------------

// Each sections has a mixins section and a classes section
// Mixins are the base of the Gymnast grid, and may be used for a completely custom grid approach
// The classes set up the tools needed for an easy to use, out of the box experience, with more shared and less repeated CSS



 // ------------------------- Rows
// -------------------------------

// ----- Row mixins
@mixin row($use:normal) {
	@if $use == normal {
		margin: 0 auto;
		max-width: $max-width;
		width: 100%;
		*zoom: 1;
		&:before,
		&:after {
			content:"";
			display:table;
		}
		&:after {
			clear:both;
		}
	}

	@if $use == nested {
	// nested rows should appear within a column
 	// they have negative margins to balance out the column's padding
		margin-right: -$gutter;
		margin-left: -$gutter;
		max-width: none;
		width: auto;
		*zoom: 1;
		&:before,
		&:after {
			content:"";
			display:table;
		}
		&:after {
			clear:both;
		}
	}
}

// ----- Row classes
.row {
	@include row;
	.row {
		@include row(nested);
	}
}
 

 // ---------------------- Columns
// -------------------------------

// ----- Column mixins
@mixin columns($number,$columns:$columns) {
	float: left;
	padding-right: $gutter;
	padding-left: $gutter;
	width: $width / ($columns / $number);
}
 
@mixin resized-columns($number,$columns:$columns) {
	// this mixin's intended use is for media queries; it results in less repeated css
	width: $width / ($columns / $number);
}

@mixin reset-columns($number,$columns:$columns) {
	// this mixin's intended use is to cancel out a .left- or .right- mixin/class
	position: static;
	width: $width / ($columns / $number);
}

// ----- Column classes
@mixin columns-class($number,$columns:$columns) {
	width: $width / ($columns / $number);
}

[class*="columns-"] {
	float: left;
	padding-right: $gutter;
	padding-left: $gutter;
	&.column-center {
		float: none;
		margin-right: auto;
		margin-left: auto;
	}
	&.text-center {
		text-align: center;
	}
}

@for $i from 1 through $columns {
	// this checks your global columns variable, and creates the classes for it
	// for example, a 12 column grid it would create classes from .columns-1 to .columns-12
	.columns-#{$i} {
		@include columns-class($i);
	}
}


 // --- Shifted Left/Right Columns
// -------------------------------

// ----- Shifted Mixins
@mixin shift-left($offset:1) {
	position: relative;
	right: $width / ($columns / $offset);
}
 
@mixin shift-right($offset:1) {
	position: relative;
	left: $width / ($columns / $offset);
}

// ----- Shifted classes
@mixin shift-left-class($offset:1) {
	right: $width / ($columns / $offset);
}
 
@mixin shift-right-class($offset:1) {
	left: $width / ($columns / $offset);
}

[class*="right-"], 
[class*="left-"] {
	position: relative
}

@for $i from 1 through $columns {
	// this checks your global columns variable, and creates the shift left classes for it
	// for example, a 16 column grid it would create classes from .left-1 to .left-16
	.left-#{$i} {
		@include shift-left($i);
	}
}

@for $i from 1 through $columns {
	// this checks your global columns variable, and creates the shift right classes for it
	// for example, a 24 column grid it would create classes from .right-1 to .right-24
	.right-#{$i} {
		@include shift-right($i);
	}
}


 // ------------------ Block Grids
// -------------------------------

// ----- Block grid mixins
@mixin block-grid($up:2) {
	// the up value is how many list items you want before it wraps to a second row
	display: block;
	margin-top: 0;
	margin-right: -$gutter;
	margin-bottom: $gutter;
	margin-left: -$gutter;
	overflow: auto;
	padding: 0;
	> li {
		display: block;
		float: left;
		height: auto;
		padding-right: $gutter;
		padding-left: $gutter;
		width: 100% / $up;
		&:nth-of-type(#{$up}n+1) {
			clear: both;
		}
	}
}
 
@mixin block-reset($up:2){
	// this mixin's intended use is for media queries; it resets the clear: both on the nth of type
	// then use the main block grid mixin again within the media query to change its 'up' value
	&:nth-of-type(#{$up}n+1) {
		clear: none;
	}
}

// ----- Block grid classes
 @mixin block-grid-class($up:2) {
	> li {
		width: 100% / $up;
		&:nth-of-type(#{$up}n+1) {
			clear: both;
		}
	}
}

[class*="block-grid-"] {
	display: block;
	margin-top: 0;
	margin-right: -$gutter;
	margin-bottom: $gutter;
	margin-left: -$gutter;
	overflow: auto;
	padding: 0;
	> li {
		display: block;
		float: left;
		height: auto;
		padding-right: $gutter;
		padding-left: $gutter;
	}
}

@for $i from 2 through $block-grids {
	// this checks your global block grid variable, and creates the block grid classes for it
	// for example, a variable of 6 would create classes from .block-grid-2 to .block-grid-6
	.block-grid-#{$i} {
		@include block-grid-class($i);
	}
}

// ----- Inline Block Grid
@mixin inline-block-grid($blocks: null) {
	display: block;
	margin-top: 0;
	margin-right: -$gutter;
	margin-bottom: $gutter;
	margin-left: -$gutter;
	overflow: auto;
	padding: 0;
	> li {
		display: block;
		float: left;
		height: auto;
		padding-right: $gutter;
		padding-left: $gutter;
		&:first-child:nth-last-child(1) {
			width: 100%;
		}

		@if $blocks != null {
			$max-inline-blocks: $blocks;
		}

		@for $i from 2 through $max-inline-blocks {
			&:first-child:nth-last-child(#{$i}),
			&:first-child:nth-last-child(#{$i}) ~ li {
				width: 100% / $i;
			}
		}
	}
}

.inline-block-grid {
	@include inline-block-grid();
}