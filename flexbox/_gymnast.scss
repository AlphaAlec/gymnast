// Table of Contents
// 1. Grid Variables
// 2. Grid Mixins
// 3. CSS Ready Mixins and Classes
// 4. Internet Explorer 8 Fallbacks

 // ----- Grid Variables
// ---------------------
$max-width: 1355px;
$width: 100%;
$columns: 12;
$block-grids: 6;
$max-inline-blocks: 4;
$gutter: 20px;

* {
	-webkit-box-sizing: border-box;
	-moz-box-sizing: border-box;
	box-sizing: border-box;
}

 // ---------------- Overview
// --------------------------

// Each sections has a mixins section and a classes section
// Mixins are the base of the Gymnast grid, and may be used for a completely custom grid approach
// The classes set up the tools needed for an easy to use, out of the box experience, with more shared and less repeated CSS

  // -----------------------------
 // ----------------------- MIXINS
// -------------------------------

 // ------------------------- Rows
// -------------------------------
@mixin row($use:top,$horz:false,$vert:false) {
	display: flex;
	flex-wrap: wrap;
	
	@if $use == top {
		margin: 0 auto;
		max-width: $max-width;
		width: 100%;
	} @else if $use == nested {
		margin-right: -$gutter;
		margin-left: -$gutter;
		width: auto;
	}

	@if $horz == true {
		justify-content: center;
	}

	@if $vert == true {
		align-items: center;
	}
}


 // ---------------------- Columns
// -------------------------------
@mixin columns($number,$columns:$columns) {
	padding-right: $gutter;
	padding-left: $gutter;
	width: $width / ($columns / $number);
}

@mixin resized-columns($number,$columns:$columns) {
	// this mixin's intended use is for media queries; it results in less repeated css
	width: $width / ($columns / $number);
}

@mixin reset-columns($number,$columns:$columns) {
	// this mixin's intended use is to cancel out a .left- or .right- mixin/class
	position: static;
	width: $width / ($columns / $number);
}


 // -------------- Shifted Columns
// -------------------------------
@mixin shift-left($offset:1) {
	position: relative;
	right: $width / ($columns / $offset);
}
 
@mixin shift-right($offset:1) {
	position: relative;
	left: $width / ($columns / $offset);
}


 // ------------------ Block Grids
// -------------------------------

@mixin block-grid($up:2) {
	// the up value is how many list items you want before it wraps to a second row
	display: flex;
	flex-wrap: wrap;
	list-style: none;
	margin-top: 0;
	margin-right: -$gutter;
	margin-bottom: $gutter;
	margin-left: -$gutter;
	padding: 0;
	> li {
		padding-right: $gutter;
		padding-left: $gutter;
		width: 100% / $up;
	}
}


  // -----------------------------
 // ---------------------- CLASSES
// -------------------------------

 // ------------------------- Rows
// -------------------------------
.row {
	@include row;
	&.cent-horz {
		justify-content: center;
	}
	&.cent-vert {
		align-items: center;
	}
	.row {
		@include row(nested);
	}
}


 // ---------------------- Columns
// -------------------------------
@mixin columns-class($number,$columns:$columns) {
	width: $width / ($columns / $number);
}

[class^="columns-"] {
	padding-right: $gutter;
	padding-left: $gutter;
	&.column-center {
		margin-right: auto;
		margin-left: auto;
	}
	&.text-center {
		text-align: center;
	}
}

.order-flip {
	order: 1;
	@media screen and (max-width: 767px) {
		order: 0;
	}
}

@for $i from 1 through $columns {
	// this checks your global columns variable, and creates the classes for it
	// for example, a 12 column grid it would create classes from .columns-1 to .columns-12
	.columns-#{$i} {
		@include columns-class($i);
	}
}


 // -------------- Shifted Columns
// -------------------------------
@mixin shift-left-class($offset:1) {
	right: $width / ($columns / $offset);
}
 
@mixin shift-right-class($offset:1) {
	left: $width / ($columns / $offset);
}

[class^="right-"], 
[class^="left-"] {
	position: relative
}

@for $i from 1 through $columns {
	// this checks your global columns variable, and creates the shift left classes for it
	// for example, a 16 column grid it would create classes from .left-1 to .left-16
	.left-#{$i} {
		@include shift-left($i);
	}
}

@for $i from 1 through $columns {
	// this checks your global columns variable, and creates the shift right classes for it
	// for example, a 24 column grid it would create classes from .right-1 to .right-24
	.right-#{$i} {
		@include shift-right($i);
	}
}


 // ------------------ Block Grids
// -------------------------------
[class^="block-grid-"] {
	display: flex;
	flex-wrap: wrap;
	list-style: none;
	margin-top: 0;
	margin-right: -$gutter;
	margin-bottom: $gutter;
	margin-left: -$gutter;
	padding: 0;
	> li {
		padding-right: $gutter;
		padding-left: $gutter;
	}
}

 @mixin block-grid-class($up:2) {
	> li {
		width: 100% / $up;
	}
}

@for $i from 2 through $block-grids {
	// this checks your global block grid variable, and creates the block grid classes for it
	// for example, a variable of 6 would create classes from .block-grid-2 to .block-grid-6
	.block-grid-#{$i} {
		@include block-grid-class($i);
	}
}